<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        header {
            background-color: #007bff;
            color: white;
            padding: 20px 0;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .todo-container {
            max-width: 600px;
            margin: 30px auto;
            background: #fff;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .todo-container:hover {
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        }
        input[type="text"], input[type="date"], select {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 2px solid #ccc;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
            background-color: #f9f9f9;
        }
        input[type="text"]:focus, input[type="date"]:focus, select:focus {
            border-color: #007bff;
            outline: none;
        }
        button {
            padding: 15px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s, transform 0.3s;
        }
        button:hover {
            background-color: #0056b3;
            transform: scale(1.05);
        }
        ul {
            list-style-type: none;
            padding: 0;
            margin: 20px 0 0;
        }
        li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #e9ecef;
            margin: 5px 0;
            border-radius: 8px;
            transition: background-color 0.3s;
        }
        li:hover {
            background: #d8d9db;
        }
        .task-buttons {
            display: flex;
            gap: 10px;
        }
        .task-buttons button {
            padding: 10px 15px;
            font-size: 14px;
        }
        footer {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            margin-top: 30px;
            border-top: 1px solid #ccc;
            box-shadow: 0 -4px 8px rgba(0, 0, 0, 0.1);
        }
        .error {
            color: red;
            margin-top: 10px;
            font-size: 14px;
        }
        .btn-add {
            margin-top: 20px;
        }
        input[type="date"] {
            background-color: #ffffff;
            cursor: pointer;
        }
        select {
            background-color: #ffffff;
            cursor: pointer;
        }
        select option {
            padding: 10px;
        }
    </style>
</head>
<body>
<header>
    <h1>Task Management</h1>
</header>
<div class="todo-container">
    <div>
        <input type="text" id="taskInput" placeholder="Enter new task...">
        <input type="text" id="taskDescription" placeholder="Task description...">
        <input type="date" id="taskDueDate">
        <select id="taskPriority">
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
        </select>
    </div>
    <div class="btn-add">
        <button id="addTaskButton">Add Task</button>
    </div>
    <div class="error" id="error"></div>
    <ul id="taskList"></ul>
</div>
<footer>
    <p>&copy; 2024 Task Management. All rights reserved.</p>
</footer>

<script>
    const taskList = document.getElementById('taskList');
    const taskInput = document.getElementById('taskInput');
    const addTaskButton = document.getElementById('addTaskButton');
    const errorDiv = document.getElementById('error');

    async function fetchTasks() {
        const response = await fetch('/api/tasks');
        const tasks = await response.json();
        renderTasks(tasks);
    }

    function renderTasks(tasks) {
        taskList.innerHTML = '';
        tasks.forEach(task => {
            const li = document.createElement('li');
            li.innerText = task.name;

            const taskButtons = document.createElement('div');
            taskButtons.className = 'task-buttons';

            const editButton = document.createElement('button');
            editButton.innerText = 'Edit';
            editButton.onclick = () => editTask(task._id, task.name, task.description, task.dueDate, task.priority, task.completed);

            const deleteButton = document.createElement('button');
            deleteButton.innerText = 'Delete';
            deleteButton.onclick = () => deleteTask(task._id);

            taskButtons.appendChild(editButton);
            taskButtons.appendChild(deleteButton);
            li.appendChild(taskButtons);
            taskList.appendChild(li);
        });
    }

    addTaskButton.onclick = async () => {
        const taskName = taskInput.value.trim();
        const taskDescription = document.getElementById('taskDescription').value.trim();
        const taskDueDate = document.getElementById('taskDueDate').value;
        const taskPriority = document.getElementById('taskPriority').value;

        if (validateTask(taskName)) {
            const response = await fetch('/api/tasks', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: taskName,
                    description: taskDescription,
                    dueDate: taskDueDate,
                    priority: taskPriority
                }),
            });
            if (response.ok) {
                taskInput.value = '';
                errorDiv.innerText = '';
                fetchTasks();
            }
        }
    };

    function validateTask(taskName) {
        if (!taskName) {
            errorDiv.innerText = 'Please enter the task name.';
            return false;
        }
        if (taskName.length < 3) {
            errorDiv.innerText = 'Task name must be at least 3 characters.';
            return false;
        }
        return true;
    }

    async function editTask(id, currentName, currentDescription, currentDueDate, currentPriority, currentCompleted) {
        const newName = prompt('Enter new task name:', currentName);

        if (newName !== null && newName.trim() !== '') {
            const newDescription = prompt('Enter new task description:', currentDescription);
            const newDueDate = prompt('Enter new due date (YYYY-MM-DD):', currentDueDate ? currentDueDate.split('T')[0] : '');
            const newPriority = prompt('Enter new priority (low, medium, high):', currentPriority);
            const newCompleted = confirm('Is this task completed?') ? true : false;

            if (newName.length < 3) {
                errorDiv.innerText = 'Task name must be at least 3 characters.';
                return;
            }

            const response = await fetch(`/api/tasks/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    name: newName,
                    description: newDescription,
                    dueDate: newDueDate,
                    priority: newPriority,
                    completed: newCompleted
                }),
            });

            if (response.ok) {
                fetchTasks();
            } else {
                const errorData = await response.json();
                errorDiv.innerText = 'Error updating task: ' + errorData.error;
            }
        }
    }

    async function deleteTask(id) {
        if (confirm('Are you sure you want to delete this task?')) {
            await fetch(`/api/tasks/${id}`, {
                method: 'DELETE',
            });
            fetchTasks();
        }
    }

    fetchTasks();
</script>
</body>
</html>
